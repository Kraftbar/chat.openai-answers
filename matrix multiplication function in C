Here is an example of a function that performs matrix multiplication in C:

Copy code
#include <stdio.h>

#define N 3

void matrix_multiply(int A[][N], int B[][N], int C[][N])
{
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            C[i][j] = 0;
            for (int k = 0; k < N; k++) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

int main(void)
{
    int A[N][N] = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} };
    int B[N][N] = { {9, 8, 7}, {6, 5, 4}, {3, 2, 1} };
    int C[N][N];

    matrix_multiply(A, B, C);

    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%d ", C[i][j]);
        }
        printf("\n");
    }

    return 0;
}
This function takes in three matrices A, B, and C and performs the matrix multiplication C = A * B. It does this by using a nested loop structure to iterate over each element of the resulting matrix C and multiplying the corresponding elements from A and B using the formula for matrix multiplication.

The size of the matrices is defined as a constant N at the beginning of the program. In this example, the matrices are assumed to be square matrices of size N x N.

You can modify this function to work with matrices of different sizes or to perform other operations, such as element-wise multiplication or addition.
