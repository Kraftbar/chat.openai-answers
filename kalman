#include <stdio.h>
#include <math.h>

#define N 2

struct kalman_filter {
    double x[N];  // state vector
    double P[N][N];  // state covariance matrix
    double F[N][N];  // state transition matrix
    double H[N][N];  // measurement matrix
    double Q[N][N];  // process noise covariance matrix
    double R[N][N];  // measurement noise covariance matrix
    double K[N];  // Kalman gain
};

void kalman_init(struct kalman_filter *kf,
                 double x[N], double P[N][N],
                 double F[N][N], double H[N][N],
                 double Q[N][N], double R[N][N])
{
    for (int i = 0; i < N; i++) {
        kf->x[i] = x[i];
        kf->K[i] = 0;
        for (int j = 0; j < N; j++) {
            kf->P[i][j] = P[i][j];
            kf->F[i][j] = F[i][j];
            kf->H[i][j] = H[i][j];
            kf->Q[i][j] = Q[i][j];
            kf->R[i][j] = R[i][j];
        }
    }
}

void kalman_predict(struct kalman_filter *kf)
{
    // x = F * x
    for (int i = 0; i < N; i++) {
        kf->x[i] = 0;
        for (int j = 0; j < N; j++) {
            kf->x[i] += kf->F[i][j] * kf->x[j];
        }
    }

    // P = F * P * F^T + Q
    double P[N][N] = { {0} };
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            for (int k = 0; k < N; k++) {
                P[i][j] += kf->F[i][k] * kf->P[k][j];
            }
        }
    }
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            kf->P[i][j] = 0;
            for (int k = 0; k < N; k++) {
                kf->P[i][j] += P[i][k] * kf->F[j][k];
            }
            kf->P[i][j] += kf->Q[i][j];
        }
    }
}

void kalman_update(struct k
